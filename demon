#!/usr/bin/env python
import sys
import json
import requests
import zlib
import glob
import os
from datetime import datetime, timedelta
from PySide6 import QtCore, QtWidgets
from PySide6.QtCore import QTimer
from PySide6.QtWidgets import QPlainTextEdit


class DataProcessor:
    def start_time(self, timestamp):
        self._dt_start_time = datetime.strptime(timestamp[0], '%Y-%m-%d %H:%M:%S.%f')

    def calculate_datetime_from_offset(self, time_offset):
        return self._dt_start_time + timedelta(seconds=float(time_offset))

    def sensor_capture(self, sensor_data):
        self._data['capture'].append({
            'time': datetime.strftime(self.calculate_datetime_from_offset(sensor_data[0]), '%H:%M:%S %d-%m-%Y'),
            'hfr': round(float(sensor_data[3]), 2),
            'ecc': round(float(sensor_data[7]), 2)
        })

    def sensor_mount(self, sensor_data):
        self._data['mount'].append({
            'time': datetime.strftime(self.calculate_datetime_from_offset(sensor_data[0]), '%H:%M:%S %d-%m-%Y'),
            'ra': round(float(sensor_data[1]), 2),
            'dec': round(float(sensor_data[2]), 2),
            'azi': round(float(sensor_data[3]), 2),
            'alt': round(float(sensor_data[4]), 2),
            'pier': 'W' if sensor_data[5] == 0 else 'E'
        })

        if len(self._data['mount']) > 1:
            self._data['mount'].pop(0)

    def sensor_guiding(self, sensor_data):
        ra_err = round(float(sensor_data[1]), 2)
        dec_err = round(float(sensor_data[2]), 2)
        total_err = round(pow(pow(ra_err, 2) + pow(dec_err, 2), 0.5), 2)
        self._data['guiding'].append({
            'time': datetime.strftime(self.calculate_datetime_from_offset(sensor_data[0]), '%H:%M:%S %d-%m-%Y'),
            'ra_err': ra_err,
            'dec_err': dec_err,
            'total_err': total_err
        })

        if len(self._data['guiding']) > 200:
            self._data['guiding'].pop(0)

    def sensor_temperature(self, sensor_data):
        self._data['temperature'].append({
            'time': datetime.strftime(self.calculate_datetime_from_offset(sensor_data[0]), '%H:%M:%S %d-%m-%Y'),
            'value': round(float(sensor_data[1]), 1)
        })

    def sensor_humidity(self, sensor_data):
        self._data['humidity'].append({
            'time': datetime.strftime(self.calculate_datetime_from_offset(sensor_data[0]), '%H:%M:%S %d-%m-%Y'),
            'value': round(float(sensor_data[1]), 1)
        })

    def parse_sensor_line(self, sensor_line):
        line_array = sensor_line.split(',')
        data_type = line_array[0]
        if data_type in self._data_types.keys():
            self._data_types[data_type](line_array[1:])

    def parse_file(self, filename=''):
        analyze_file = self.get_latest_analyze_file() if filename == '' else filename
        self.print_method(f"Parsing {analyze_file}")
        self.print_method(f'Session started at: {self._dt_start_time}')
        file = open(analyze_file, 'r')
        while True:
            line = file.readline()
            if not line:
                break
            self.parse_sensor_line(line.replace('\n', ''))

        for sensor in self._data:
            sensor_data = self._data[sensor][-1] if len(self._data[sensor]) > 0 else None
            if sensor_data is not None:
                self.print_method(f'{sensor}: {self._data[sensor][-1]}')

    def get_data(self):
        return self._data

    def reset_data(self):
        self._data = {
            'capture': [],
            'mount': [],
            'guiding': [],
            'temperature': [],
            'humidity': []
        }

    def update_remote_data(self, token):
        with open('output.json', 'w') as output_file:
            json.dump(self.get_data(), output_file)
        try:
            request_body = zlib.compress(json.dumps(self.get_data()).encode('utf-8'))
            headers = {
                'Content-Encoding': 'gzip'
            }
            r = requests.post(f'https://demon.astropills.it?update&stk={token}', data=request_body, headers=headers)
            return r.status_code == 200
        except requests.exceptions.RequestException as e:
            print(f"Something went wrong while uploading the data:{str(e)}")
            return False

    @staticmethod
    def get_latest_analyze_file():
        list_of_files = glob.glob('/home/astroberry/.local/share/kstars/analyze/*.analyze')
        latest_file = max(list_of_files, key=os.path.getctime)
        return latest_file

    def __init__(self, print_method):
        self._data_types = {
            'AnalyzeStartTime': self.start_time,
            'Temperature': self.sensor_temperature,
            'Humidity': self.sensor_humidity,
            'CaptureComplete': self.sensor_capture,
            'MountCoords': self.sensor_mount,
            'GuideStats': self.sensor_guiding
        }
        self._data = {
            'capture': [],
            'mount': [],
            'guiding': [],
            'temperature': [],
            'humidity': []
        }
        self._dt_start_time = datetime.now()
        self.print_method = print_method


class DEMonWidget(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.token_input = QtWidgets.QLineEdit("Enter your DE-Mon token here...")
        self.button = QtWidgets.QPushButton("Start monitoring")
        self.clear_button = QtWidgets.QPushButton("Clear logs")
        self.output_log = QPlainTextEdit(self)
        self.layout = QtWidgets.QVBoxLayout(self)
        self.layout.addWidget(self.token_input)
        self.layout.addWidget(self.button)
        self.layout.addWidget(self.clear_button)
        self.layout.addWidget(self.output_log)
        self.button.clicked.connect(self.start_monitoring)
        self.clear_button.clicked.connect(self.output_log.clear)

        self.data_processor = DataProcessor(self.__print_log)
        self.monitor_timer = QTimer()
        self.monitor_timer.setInterval(15000)
        self.monitor_timer.timeout.connect(self.monitor)

    def close(self):
        self.monitor_timer.stop()

    @QtCore.Slot()
    def start_monitoring(self):
        self.monitor_timer.start()

        self.button.setText("Stop monitoring")
        self.button.clicked.disconnect()
        self.button.clicked.connect(self.stop_monitoring)

        self.__print_log("Monitoring started...")

    @QtCore.Slot()
    def stop_monitoring(self):
        self.monitor_timer.stop()

        self.button.setText("Start monitoring")
        self.button.clicked.disconnect()
        self.button.clicked.connect(self.start_monitoring)
        self.__print_log("Monitoring stopped")

    def __get_timestamp(self):
        return datetime.now().strftime('%d/%m/%Y %H:%M:%S')

    def __print_log(self, text):
        self.output_log.appendPlainText(self.__get_timestamp() + ' - ' + text)

    def monitor(self):
        try:
            self.data_processor.parse_file('ekos.analyze')
            data_updated = self.data_processor.update_remote_data(self.token_input.text())
            self.data_processor.reset_data()
            if data_updated:
                self.__print_log('Ekos data parsed and uploaded correctly!')
            else:
                self.__print_log('Could not update the data! Did you provide a valid token?')
        except Exception as e:
            print(f"Something went wrong:{str(e)}")
            self.__print_log(f"Something went wrong:{str(e)}")


if __name__ == '__main__':
    app = QtWidgets.QApplication([])
    widget = DEMonWidget()
    widget.resize(800, 600)
    widget.show()
    sys.exit(app.exec())
